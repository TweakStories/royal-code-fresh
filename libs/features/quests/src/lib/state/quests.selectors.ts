// libs/features/quests/src/lib/state/quests.selectors.ts
import { questsFeature } from './quests.reducer'; // Import the feature created with createFeature
import { questsAdapter, QuestsState } from './quests.state';
import { createSelector } from '@ngrx/store';
import { Quest, QuestStatus } from '@royal-code/shared/domain'; // Import necessary domain models

// --- Basic Feature Selectors (Auto-generated by createFeature) ---
// These select top-level properties directly from the QuestsState.
export const {
  selectQuestsState,    // Selects the entire quests feature state slice.
  selectLoading,        // Selects the global loading flag for quests.
  selectError,          // Selects the global error message for quests.
  selectSelectedQuestId,// Selects the ID of the currently selected quest.
  selectEntities,       // Selects the dictionary of quest entities ({ id: quest }).
  selectIds             // Selects the array of quest IDs.
} = questsFeature;

// --- NgRx Entity Adapter Selectors ---
// Why: Use the adapter's built-in, memoized selectors for common entity operations.
export const {
  selectAll: selectAllQuests,             // Selects an array of all Quest objects, ordered by sortComparer.
  // selectEntities is already exported above by createFeature
  // selectIds is already exported above by createFeature
  selectTotal: selectTotalQuestsCount,    // Selects the total number of quests in the store.
} = questsAdapter.getSelectors(selectQuestsState); // Pass the feature state selector to the adapter.

// --- Derived / Convenience Selectors ---
// Why: Create selectors for common UI needs, combining basic selectors for more specific data slices.

/** Selects the currently selected quest entity based on `selectedQuestId`. */
export const selectCurrentQuest = createSelector(
  selectEntities,        // Input: The dictionary of quest entities.
  selectSelectedQuestId, // Input: The ID of the selected quest.
  (entities, selectedId): Quest | undefined =>
    // If an ID is selected, return the corresponding quest entity; otherwise, return undefined.
    selectedId ? entities[selectedId] : undefined
);

/**
 * Factory function returning a selector for a specific quest by its ID.
 * @param {string | null | undefined} id - The ID of the quest to select.
 * @returns A selector that emits the Quest entity or undefined if not found or ID is null/undefined.
 */
export const selectQuestById = (id: string | null | undefined) => createSelector(
    selectEntities, // Input: The dictionary of quest entities.
    (entities): Quest | undefined =>
      // Return the entity for the given ID, or undefined if ID is missing or entity not found.
      id ? entities[id] : undefined
);

/**
 * Factory function returning a selector for multiple quests based on an array of IDs.
 * @param {string[] | undefined | null} ids - An array of quest IDs.
 * @returns A selector that emits an array of found Quest entities.
 */
export const selectQuestsByIds = (ids: string[] | undefined | null) => createSelector(
    selectEntities, // Input: The dictionary of quest entities.
    (entities): Quest[] =>
      // Map the provided IDs to their entities, filtering out any undefined results (for IDs not found).
      (ids ?? []).map(id => entities[id]).filter((q): q is Quest => !!q)
);

/**
 * Factory function returning a selector for quests filtered by a specific status.
 * @param {QuestStatus} status - The status to filter by (e.g., QuestStatus.Active).
 * @returns A selector that emits an array of quests matching the specified status.
 */
export const selectQuestsByStatus = (status: QuestStatus) => createSelector(
    selectAllQuests, // Input: The array of all quests.
    (quests): Quest[] =>
      // Filter the array based on the quest's status property.
      quests.filter(q => q.status === status)
);

/** Selects all quests with the status 'Active'. */
export const selectActiveQuests = selectQuestsByStatus(QuestStatus.Active);

/** Selects all quests with the status 'Available'. */
export const selectAvailableQuests = selectQuestsByStatus(QuestStatus.Available);

/** Selects all quests with the status 'Completed' or 'Claimed'. */
export const selectCompletedQuests = createSelector(
    selectAllQuests,
    (quests): Quest[] =>
        quests.filter(q => q.status === QuestStatus.Completed || q.status === QuestStatus.Claimed)
);

// Example: Selector to check if a specific quest is currently loading (if using quest-specific loading state)
// export const selectIsQuestLoading = (questId: string) => createSelector(
//   selectQuestsState, // Select the whole state
//   (state) => !!state.loadingAccepting?.[questId] // Check the specific loading map
// );