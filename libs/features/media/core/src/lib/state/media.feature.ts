/**
 * @file media.feature.ts
 * @version 1.1.0 (Enterprise Production-Ready Feature Architecture - Corrected)
 * @Author Royal-Code MonorepoAppDevAI
 * @Date 2025-08-19
 * @description
 *   Enterprise-grade NgRx feature definition using the modern createFeature API
 *   for comprehensive Media domain state management. Co-locates reducer, selectors,
 *   and feature configuration into a cohesive, type-safe architectural unit.
 *
 *   Feature Capabilities:
 *   - Comprehensive entity management with adapter-driven patterns
 *   - Advanced selector composition with memoization optimization
 *   - Complex view model derivation for rich UI components
 *   - Performance-optimized pagination and filtering logic
 *   - Cache management with staleness detection
 * @GeneratedBy Royal-Code MonorepoAppDevAI
 * @GeneratedDate 2025-08-19
 * @PromptSummary Correcting the previously generated media feature files to include the same level of enterprise comments as the product feature.
 */
import { createFeature, createSelector } from '@ngrx/store';
import { mediaReducer, MediaState, mediaAdapter } from './media.reducer';
import { MediaListViewModel } from './media.types';

/**
 * Feature key constant for state registration and selector scoping.
 */
export const MEDIA_FEATURE_KEY = 'media';

/**
 * Primary feature definition using the modern createFeature API.
 */
export const mediaFeature = createFeature({
  name: MEDIA_FEATURE_KEY,
  reducer: mediaReducer,
  extraSelectors: ({
    // Base selectors automatically generated by createFeature
    selectMediaState,
    selectIsLoading,
    selectIsSubmitting,
    selectError,
    selectFilters,
    selectTotalCount,
    selectHasMore,
    selectEntities,
    selectSelectedMediaId,
    selectLastFetched,
    selectCacheTimeout,
    selectCurrentPage,
  }) => {

    // ═══════════════════════════════════════════════════════════════════════════════
    // Entity Adapter Integration
    // ═══════════════════════════════════════════════════════════════════════════════
    const { selectAll: selectAllFromAdapter } = mediaAdapter.getSelectors();

    /**
     * Primary media collection selector with full entity hydration.
     */
    const selectAllMedia = createSelector(
      selectMediaState,
      (state) => selectAllFromAdapter(state)
    );

    // ═══════════════════════════════════════════════════════════════════════════════
    // Media Selection & Detail Management
    // ═══════════════════════════════════════════════════════════════════════════════

    /**
     * Selected media item resolver with safe entity lookup.
     */
    const selectSelectedMedia = createSelector(
      selectEntities,
      selectSelectedMediaId,
      (entities, selectedId) => selectedId ? entities[selectedId] : undefined
    );

    // ═══════════════════════════════════════════════════════════════════════════════
    // Selector Factory Functions
    // ═══════════════════════════════════════════════════════════════════════════════

    /**
     * Dynamic media selector factory for ID-based entity retrieval.
     */
    const selectMediaById = (id: string) => createSelector(
      selectEntities,
      (entities) => entities[id]
    );

    // ═══════════════════════════════════════════════════════════════════════════════
    // Cache Management & Data Freshness
    // ═══════════════════════════════════════════════════════════════════════════════

    /**
     * Cache staleness detector for intelligent refresh decisions.
     */
    const selectIsStale = createSelector(
      selectLastFetched,
      selectCacheTimeout,
      (lastFetched, cacheTimeout) => {
        if (!lastFetched) return true;
        return Date.now() - lastFetched > cacheTimeout;
      }
    );

    // ═══════════════════════════════════════════════════════════════════════════════
    // Pagination & Statistics
    // ═══════════════════════════════════════════════════════════════════════════════

    /**
     * Comprehensive pagination metadata computer for advanced UI controls.
     */
    const selectPaginationInfo = createSelector(
      selectTotalCount,
      selectFilters,
      selectCurrentPage,
      selectAllMedia,
      (totalCount, filters, currentPage, media) => ({
        loadedCount: media.length,
        currentPage,
        pageSize: filters.pageSize ?? 50,
      })
    );

    // ═══════════════════════════════════════════════════════════════════════════════
    // Boolean State Derivations
    // ═══════════════════════════════════════════════════════════════════════════════

    /**
     * Media availability detector for empty state management.
     */
    const selectHasMedia = createSelector(selectAllMedia, (media) => media.length > 0);

    /**
     * Empty state detector with loading consideration.
     */
    const selectIsEmpty = createSelector(selectAllMedia, selectIsLoading, (media, isLoading) => media.length === 0 && !isLoading);

    /**
     * Unified busy state detector for comprehensive loading indicators.
     */
    const selectIsBusy = createSelector(selectIsLoading, selectIsSubmitting, (loading, submitting) => loading || submitting);

    // ═══════════════════════════════════════════════════════════════════════════════
    // Complex View Model Composition
    // ═══════════════════════════════════════════════════════════════════════════════

    /**
     * Comprehensive view model composer for complex UI components.
     * Aggregates all necessary state slices into a single, optimized object.
     */
    const selectMediaListViewModel = createSelector(
      selectAllMedia,
      selectSelectedMedia,
      selectIsLoading,
      selectIsSubmitting,
      selectError,
      selectFilters,
      selectTotalCount,
      selectHasMore,
      selectPaginationInfo,
      selectIsStale,
      selectHasMedia,
      selectIsEmpty,
      selectIsBusy,
      selectLastFetched,
      (
        media,
        selectedMedia,
        isLoading,
        isSubmitting,
        error,
        filters,
        totalCount,
        hasMore,
        pagination,
        isStale,
        hasMedia,
        isEmpty,
        isBusy,
        lastFetched
      ): MediaListViewModel => ({
        // Core data
        media,
        selectedMedia,

        // States
        isLoading,
        isSubmitting,
        error,

        // Filters & Pagination
        filters,
        totalCount,
        hasMore,
        currentPage: pagination.currentPage,
        pageSize: pagination.pageSize,
        loadedCount: pagination.loadedCount,

        // Cache & Derived states
        lastFetched,
        isStale,
        hasMedia,
        isEmpty,
        isBusy,
      })
    );

    // ═══════════════════════════════════════════════════════════════════════════════
    // Selector Export Interface
    // ═══════════════════════════════════════════════════════════════════════════════
    return {
      selectAllMedia,
      selectSelectedMedia,
      selectMediaById,
      selectIsStale,
      selectMediaListViewModel,
      selectHasMedia,
      selectIsEmpty,
      selectIsBusy,
    };
  },
});

/**
 * Comprehensive selector export interface.
 */
export const {
  // Feature metadata
  name,
  reducer,

  // Basic state selectors
  selectIsLoading,
  selectIsSubmitting,
  selectError,
  selectFilters,
  selectTotalCount,
  selectHasMore,
  selectMediaState,

  // Extended selectors
  selectAllMedia,
  selectSelectedMedia,
  selectMediaById,
  selectIsStale,
  selectMediaListViewModel,
  selectHasMedia,
  selectIsEmpty,
  selectIsBusy,
} = mediaFeature;
